}
temp_gwas$Predictor
duplicated(temp_gwas$Predictor)
table(duplicated(temp_gwas$Predictor))
sum(duplicated(temp_gwas$Predictor)==TRUE)
table(duplicated(temp_gwas$Predictor))
table(duplicated(temp_gwas$Predictor))==TRUE
table(duplicated(temp_gwas$Predictor))["TRUE"]
as.numeric(table(duplicated(temp_gwas$Predictor))["TRUE"])
cat("Found duplicated CHR:BPs, removing",as.numeric(table(duplicated(temp_gwas$Predictor))["TRUE"]), "SNPs\n")
dim(temp_gwas)
temp_gwas = temp_gwas[!duplicated(temp_gwas$Predictor),]
dim(temp_gwas)
dim(temp_gwas)[1]
cat(dim(temp_gwas)[1],"remaining\n")
{cat("Found duplicated CHR:BPs, removing",as.numeric(table(duplicated(temp_gwas$Predictor))["TRUE"]), "SNPs\n");cat(dim(temp_gwas)[1],"remaining\n")}
sum(duplicated(temp_gwas$Predictor)==TRUE)>0
f_prepareGWAS(trait = "BMI")
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
f_prepareGWAS(trait = "BMI")
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
f_prepareGWAS(trait = "BMI")
f_calcPGS_LDAK(Trait = "BMI")
temp_bfile = "C:/Users/p70072451/Downloads/ADNI/ADNI_QC_EUR05_2"
temp_bfile3 = f_wslpath(temp_bfile)
f_predPRS(cohort = temp_bfile3, Trait = "BMI")
f_predPRS(bfile = temp_bfile3, Trait = "BMI")
f_getTraits()
cohort_name = "ADNI_QC_EUR05_2"
cohort_name
temp_bfile = paste0("C:/Users/p70072451/Downloads/ADNI/",cohort_name)
temp_bfile
temp_bfile3 = f_wslpath(temp_bfile)
temp_bfile3
a=	f_collect_all_PRS(cohort_name)
a
plot(a$BMI,a$Height22)
f_getTraits()
f_calcPGS_LDAK(Trait = "Height22")
f_predPRS(bfile = temp_bfile3, Trait = "Height22")
PGS_all = f_collect_all_PRS(cohort_name)
plot(PGS_all)
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
f_getManifest(1)
f_addGWAStoManifest(
short=c("ASD"),
n=c(10000), # default 10,000? @RRR discuss
filename=c("D:/DATA_STORAGE/GWAS/Autism_Spectrum_Disorder_2019/ASD_2019_70.txt"),
year=c("2019"),
trait=c("Autism_Spectrum_Disorder_2019"),
DOI=c("?"),
genomeBuild = c("?"),
traitType = c("CAT"),
rawSNPs = c("?"),
finalModelSNPs = c("?"),
modelRunningTime = c("?"),
usedRefSet = c("?"),
processed=c(0),
FORCE = FALSE)
trait = "ASD"
#@RRR MOVE TO SETTINGS PLEASE :)
listofStandardizedGWASes = c("Birth_length","BMI","ASD")
# Get manifest
f_getManifest()
# check if trait exists
if(sum(Ref_gwas_manifest$short%in%trait) == 0){
message("Trait('",trait,"') not found!")
message("  Options:\n    - ",paste0(Ref_gwas_manifest$short,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
# check if trait is accepted
if(!trait%in%listofStandardizedGWASes){
message("Trait('",trait,"') not supported yet!")
message("  Options:\n    - ",listofStandardizedGWASes,collapse = "\n    - ")
return(message("Preparing GWAS into standardized format aborted."))
}
#warning("(SumStats.R)    !!! This needs standardized input !!!")
temp_manifest = Ref_gwas_manifest[Ref_gwas_manifest$short%in%trait,]
#temp_gwas = read.table(temp_manifest$filename,header = TRUE,sep = "\t")
temp_gwas = data.table::fread(temp_manifest$filename,header = TRUE,sep = "\t") # waaay faster now!
# Make sure no BP or CHR are missing (NA); remove!
temp_gwas = temp_gwas[!(is.na(temp_gwas$CHR)|is.na(temp_gwas$BP)),]
cat("GWAS loaded, found",dim(temp_gwas)[1],"(non-NA) SNPs\n")
temp_manifest$traitType
if(temp_manifest$traitType=="CONT")
temp_manifest$traitType
{
message("Trait-type must be set to 'CAT' or 'CONT'!")
message("Currently this is set to ",temp_manifest$traitType)
return(message("Preparing GWAS into standardized format aborted."))
}
{{
message("Trait-type must be set to 'CAT' or 'CONT'!")
message("Currently this is set to ",temp_manifest$traitType)
return(message("TraitType is incorrect, preparing GWAS into standardized format aborted."))
}}
temp_gwas
temp_gwas$OR
hist(temp_gwas$OR)
hist(temp_gwas$SE)
hist(temp_gwas$OR)
temp_gwas$OR-1
hist(temp_gwas$OR-1)
temp_gwas
colnames(temp_gwas)
colnames(temp_gwas)
colnames(temp_gwas)%in%c("CHR",  "SNP",  "BP",   "A1",   "A2", "OR",   "SE",   "P"   ,"N","BETA")
colnames(temp_gwas)%in%c("CHR",  "SNP",  "BP",   "A1",   "A2", "OR",   "SE",   "P"   ,"N","BETA")
coltest
coltest = colnames(temp_gwas)%in%c("CHR",  "SNP",  "BP",   "A1",   "A2", "OR",   "SE",   "P"   ,"N","BETA")
coltest
!coltest
sum()
sum(!coltest )
sum(!coltest)>0
requiredcols = c("CHR",  "SNP",  "BP",   "A1",   "A2", "OR",   "SE",   "P"   ,"N","BETA")
coltest = colnames(temp_gwas)%in%requiredcols
requiredcols[!coltest]
requiredcols%in%colnames(temp_gwas)
requiredcols
requiredcols = c("CHR",  "BP",   "A1",   "A2", "N",   "BETA",   "P" )
coltest = requiredcols%in%colnames(temp_gwas)
if(sum(!coltest)>0){
requiredcols[!coltest]
}
requiredcols[!coltest]
{
message("Missing required columns in GWAS data!")
return(message("Column",requiredcols[!coltest],"is missing in GWAS file."))
requiredcols[!coltest]
}
requiredcols[!coltest]
paste0(requiredcols[!coltest],collapse = "@")
paste0(requiredcols[!coltest],collapse = " and ")
paste0(requiredcols[!coltest],collapse = " & ")
if(sum(!coltest)>0){
message("Missing required columns in GWAS data!")
return(message("Column",paste0(requiredcols[!coltest],collapse = " & "),"is missing in GWAS file."))
}
if(sum(!coltest)>0){
message("Missing required columns in GWAS data!")
return(message("Column ",paste0(requiredcols[!coltest],collapse = " & ")," is missing in GWAS file."))
}
# Check if GWAS contains all required columns
requiredcols = c("CHR",  "BP",   "A1",   "A2", "N",   "OR",   "P" )
coltest = requiredcols%in%colnames(temp_gwas)
if(sum(!coltest)>0){
message("Missing required columns in GWAS data!")
return(message("Column ",paste0(requiredcols[!coltest],collapse = " & ")," is missing in GWAS file."))
}
f_getManifest(1)
f_prepareGWAS(trait = "ASD")
message("  Options:\n    - ",listofStandardizedGWASes,collapse = "\n    - ")
list(listofStandardizedGWASes)
paste0(Ref_gwas_manifest$short,collapse = "\n    - ")
message("  Options:\n    - ",paste0(listofStandardizedGWASes,collapse = "\n    - "))
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
f_prepareGWAS(trait = "ASD")
f_prepareGWAS(trait = "ASD")
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
f_prepareGWAS(trait = "ASD")
trait = "ASD"
#@RRR MOVE TO SETTINGS PLEASE :)
listofStandardizedGWASes = c("Birth_length","BMI","ASD")
# Get manifest
f_getManifest()
# check if trait exists
if(sum(Ref_gwas_manifest$short%in%trait) == 0){
message("Trait('",trait,"') not found!")
message("  Options:\n    - ",paste0(Ref_gwas_manifest$short,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
# check if trait is accepted
if(!trait%in%listofStandardizedGWASes){
message("Trait('",trait,"') not supported yet!")
message("  Options:\n    - ",paste0(listofStandardizedGWASes,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
#warning("(SumStats.R)    !!! This needs standardized input !!!")
temp_manifest = Ref_gwas_manifest[Ref_gwas_manifest$short%in%trait,]
#temp_gwas = read.table(temp_manifest$filename,header = TRUE,sep = "\t")
temp_gwas = data.table::fread(temp_manifest$filename,header = TRUE,sep = "\t",fill=TRUE) # waaay faster now!
# Make sure no BP or CHR are missing (NA); remove!
temp_gwas = temp_gwas[!(is.na(temp_gwas$CHR)|is.na(temp_gwas$BP)),]
cat("GWAS loaded, found",dim(temp_gwas)[1],"(non-NA) SNPs\n")
# Check if temp_manifest$traitType is OK
if(!(temp_manifest$traitType == "CAT" | temp_manifest$traitType == "CONT")){
message("Trait-type must be set to 'CAT' or 'CONT'!")
message("Currently this is set to ",temp_manifest$traitType)
return(message("TraitType is incorrect, preparing GWAS into standardized format aborted."))
}
#################################
#	CONT method
#################################
if(temp_manifest$traitType=="CONT"){
# Check if GWAS contains all required columns
requiredcols = c("CHR",  "BP",   "A1",   "A2", "N",   "BETA",   "P" )
coltest = requiredcols%in%colnames(temp_gwas)
if(sum(!coltest)>0){
message("Missing required columns in GWAS data!")
return(message("Column ",paste0(requiredcols[!coltest],collapse = " & ")," is missing in GWAS file."))
}
if(temp_manifest$short%in%listofStandardizedGWASes){
cat("(Functions.R)    Using standardized CONT GWAS processing\n")
temp_gwas = data.frame(Predictor=paste0(temp_gwas$CHR,":",temp_gwas$BP),
A1=toupper(temp_gwas$A1),
A2=toupper(temp_gwas$A2),
n=temp_gwas$N,
Direction=sign(temp_gwas$BETA),
P=temp_gwas$P)
}else{
message("Trait('",trait,"') not supported yet!")
message("  Options:\n    - ",paste0(listofStandardizedGWASes,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
}
#################################
#	CAT method
#################################
if(temp_manifest$traitType=="CAT"){
# Check if GWAS contains all required columns
requiredcols = c("CHR",  "BP",   "A1",   "A2", "N",   "OR",   "P" )
coltest = requiredcols%in%colnames(temp_gwas)
if(sum(!coltest)>0){
message("Missing required columns in GWAS data!")
return(message("Column ",paste0(requiredcols[!coltest],collapse = " & ")," is missing in GWAS file."))
}
if(temp_manifest$short%in%listofStandardizedGWASes){
cat("(Functions.R)    Using standardized CAT GWAS processing\n")
temp_gwas = data.frame(Predictor=paste0(temp_gwas$CHR,":",temp_gwas$BP),
A1=toupper(temp_gwas$A1),
A2=toupper(temp_gwas$A2),
n=temp_gwas$N,
Direction=sign((temp_gwas$OR-1)), #@RRR Check if this is correct; should be! OR is centered around 1.
P=temp_gwas$P)
}else{
message("Trait('",trait,"') not supported yet!")
message("  Options:\n    - ",paste0(listofStandardizedGWASes,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
}
# Check for duplicated predictors and remove
if(sum(duplicated(temp_gwas$Predictor)==TRUE)>0){
cat("Found duplicated CHR:BPs, removing",as.numeric(table(duplicated(temp_gwas$Predictor))["TRUE"]), "SNPs\n")
temp_gwas = temp_gwas[!duplicated(temp_gwas$Predictor),]
cat(dim(temp_gwas)[1],"remaining\n")
}
temp_manifest$short
temp_gwas$n
temp_gwas$n = 10000
temp_gwas
assign(x=temp_manifest$short, temp_gwas)
#save(list=c(temp_manifest$short),file = paste0(s_ROOT_dir,s_out_folder,"DATA/gwas/",temp_manifest$short,".Rdata")) # @RRR OPTIONAL. This is only for loading in R. This line should be commented out at some point
data.table::fwrite(get(temp_manifest$short),file = paste0(s_ROOT_dir,s_out_folder,"DATA/gwas/",temp_manifest$short,".summaries"),row.names = FALSE,sep = "\t",quote = FALSE) # FASTERRRR
# update settings
Ref_gwas_manifest[!Ref_gwas_manifest$short%in%trait,"processed"] = 1
Ref_gwas_manifest[!Ref_gwas_manifest$short%in%trait,"rawSNPs"] = dim(temp_gwas )[1]
# Update manifest
f_saveManifest()
f_calcPGS_LDAK(Trait = "ASD")
temp_gwas
temp_gwas$A1
nchar(temp_gwas$A1)
nchar(temp_gwas$A1)==1 & nchar(temp_gwas$A2)==1
table(nchar(temp_gwas$A1)==1 & nchar(temp_gwas$A2)==1)
cat("GWAS loaded, found",dim(temp_gwas)[1],"(non-NA) SNPs\n")
cat("of which ",dim(temp_gwas)[1],"have non-multi-alleles\n")
{cat("GWAS loaded, found",dim(temp_gwas)[1],"(non-NA) SNPs");cat(" of which ",dim(temp_gwas)[1],"have non-multi-alleles\n")}
#Read the GWAS data
temp_gwas = data.table::fread(temp_manifest$filename,header = TRUE,sep = "\t",fill=TRUE) # waaay faster now!
# Make sure no BP or CHR are missing (NA); remove!
temp_gwas = temp_gwas[!(is.na(temp_gwas$CHR)|is.na(temp_gwas$BP)),]
cat("GWAS loaded, found",dim(temp_gwas)[1],"(non-NA) SNPs")
# Check if there are multi-alleles in the gwas, remove!
temp_gwas = temp_gwas[nchar(temp_gwas$A1)==1 & nchar(temp_gwas$A2)==1,]
cat(" of which",dim(temp_gwas)[1],"have non-multi-alleles\n")
#@RRR MOVE TO SETTINGS PLEASE :)
listofStandardizedGWASes = c("Birth_length","BMI","ASD")
# Get manifest
f_getManifest()
# check if trait exists
if(sum(Ref_gwas_manifest$short%in%trait) == 0){
message("Trait('",trait,"') not found!")
message("  Options:\n    - ",paste0(Ref_gwas_manifest$short,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
# check if trait is accepted
if(!trait%in%listofStandardizedGWASes){
message("Trait('",trait,"') not supported yet!")
message("  Options:\n    - ",paste0(listofStandardizedGWASes,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
# Select the trait from manifest
temp_manifest = Ref_gwas_manifest[Ref_gwas_manifest$short%in%trait,]
#Read the GWAS data
temp_gwas = data.table::fread(temp_manifest$filename,header = TRUE,sep = "\t",fill=TRUE) # waaay faster now!
# Make sure no BP or CHR are missing (NA); remove!
temp_gwas = temp_gwas[!(is.na(temp_gwas$CHR)|is.na(temp_gwas$BP)),]
cat("GWAS loaded, found",dim(temp_gwas)[1],"(non-NA) SNPs")
# Check if there are multi-alleles in the gwas, remove!
temp_gwas = temp_gwas[nchar(temp_gwas$A1)==1 & nchar(temp_gwas$A2)==1,]
cat(" of which",dim(temp_gwas)[1],"have non-multi-alleles!\n")
# Check if temp_manifest$traitType is OK
if(!(temp_manifest$traitType == "CAT" | temp_manifest$traitType == "CONT")){
message("Trait-type must be set to 'CAT' or 'CONT'!")
message("Currently this is set to ",temp_manifest$traitType)
return(message("TraitType is incorrect, preparing GWAS into standardized format aborted."))
}
#################################
#	CONT method
#################################
if(temp_manifest$traitType=="CONT"){
# Check if GWAS contains all required columns
requiredcols = c("CHR",  "BP",   "A1",   "A2", "N",   "BETA",   "P" )
coltest = requiredcols%in%colnames(temp_gwas)
if(sum(!coltest)>0){
message("Missing required columns in GWAS data!")
return(message("Column ",paste0(requiredcols[!coltest],collapse = " & ")," is missing in GWAS file."))
}
if(temp_manifest$short%in%listofStandardizedGWASes){
cat("(Functions.R)    Using standardized CONT GWAS processing\n")
temp_gwas = data.frame(Predictor=paste0(temp_gwas$CHR,":",temp_gwas$BP),
A1=toupper(temp_gwas$A1),
A2=toupper(temp_gwas$A2),
n=temp_gwas$N,
Direction=sign(temp_gwas$BETA),
P=temp_gwas$P)
}else{
message("Trait('",trait,"') not supported yet!")
message("  Options:\n    - ",paste0(listofStandardizedGWASes,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
}
#################################
#	CAT method
#################################
if(temp_manifest$traitType=="CAT"){
# Check if GWAS contains all required columns
requiredcols = c("CHR",  "BP",   "A1",   "A2", "N",   "OR",   "P" )
coltest = requiredcols%in%colnames(temp_gwas)
if(sum(!coltest)>0){
message("Missing required columns in GWAS data!")
return(message("Column ",paste0(requiredcols[!coltest],collapse = " & ")," is missing in GWAS file."))
}
if(temp_manifest$short%in%listofStandardizedGWASes){
cat("(Functions.R)    Using standardized CAT GWAS processing\n")
temp_gwas = data.frame(Predictor=paste0(temp_gwas$CHR,":",temp_gwas$BP),
A1=toupper(temp_gwas$A1),
A2=toupper(temp_gwas$A2),
n=temp_gwas$N,
Direction=sign((temp_gwas$OR-1)), #@RRR Check if this is correct; should be! OR is centered around 1.
P=temp_gwas$P)
}else{
message("Trait('",trait,"') not supported yet!")
message("  Options:\n    - ",paste0(listofStandardizedGWASes,collapse = "\n    - "))
return(message("Preparing GWAS into standardized format aborted."))
}
}
# Check for duplicated predictors and remove
if(sum(duplicated(temp_gwas$Predictor)==TRUE)>0){
cat("Found duplicated CHR:BPs, removing",as.numeric(table(duplicated(temp_gwas$Predictor))["TRUE"]), "SNPs\n")
temp_gwas = temp_gwas[!duplicated(temp_gwas$Predictor),]
cat(dim(temp_gwas)[1],"remaining\n")
}
# Collect the data and write a summaries format
temp_gwas
temp_gwas$n = 10000
assign(x=temp_manifest$short, temp_gwas)
data.table::fwrite(get(temp_manifest$short),file = paste0(s_ROOT_dir,s_out_folder,"DATA/gwas/",temp_manifest$short,".summaries"),row.names = FALSE,sep = "\t",quote = FALSE) # FASTERRRR
# update settings
Ref_gwas_manifest[!Ref_gwas_manifest$short%in%trait,"processed"] = 1
Ref_gwas_manifest[!Ref_gwas_manifest$short%in%trait,"rawSNPs"] = dim(temp_gwas )[1]
# Update manifest
f_saveManifest()
f_calcPGS_LDAK(Trait = "ASD")
cohort_name = "ADNI_QC_EUR05_2"
temp_bfile = paste0("C:/Users/p70072451/Downloads/ADNI/",cohort_name)
temp_bfile3 = f_wslpath(temp_bfile)
f_predPRS(bfile = temp_bfile3, Trait = "ASD")
PGS_all = f_collect_all_PRS(cohort_name)
plot(PGS_all)
PGS_all
cor(PGS_all)
PGS_all
PGS_all[,-7]
PGS_all[,-8]
PGS_all[,-7]
PGS_all[,-7]
PGS_all[,-7]
cor(PGS_all[,-7])
rowanmes(PGS)
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
PGS_all = f_collect_all_PRS(cohort_name)
plot(PGS_all)
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
PGS_all = f_collect_all_PRS(cohort_name)
plot(PGS_all)
cohort = cohort_name
# check if cohort exists; im assuming writign the correct name is not a problem, cause i dont check
if(is.na(cohort)){
return(warning("Cohort name is NA"))
}
# find root
Predictroot = paste0(s_ROOT_dir,"Data_QC/",s_ROOT_current_folder_name,"/Predict/")
# find all files in predict folder
all_files = list.files(Predictroot)
# Get all profiles
select_files = grep(all_files ,pattern = paste0("(",cohort,")(?=.*profile$)"),perl = TRUE) # magic of regex; searches A: the cohort name and B: any file with A ending on ".profile"
#@RRR fix grep name chort not FULLY CMPLETE MATCh
# make into 1 object
PGS = list()
for(i in select_files){
current_file = all_files[i]
current_trait = gsub(current_file,pattern = paste0(cohort,".|.profile"),replacement = "")
profile = read.table(paste0(Predictroot,current_file),header = TRUE,sep = "\t")
PGS[current_trait]= data.frame(as.numeric(profile[,"Profile_1"])) # always  Profile_1, only running 1 at a time
}
PGS
str(PGS)
data.frame(profile$ID1)
profile$ID1
PGS = data.frame(PGS)
dim(PGS )
rownames(PGS)
rownames(PGS) = profile$ID1
head(PGS)
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
PGS_all = f_collect_all_PRS(cohort_name)
plot(PGS_all)
PGS_all
cor(PGS_all)
cor(PGS_all,method = "sp")
corrplot::corrplot(cor(PGS_all,method = "sp"))
corrplot::corrplot(cor(PGS_all))
corrr = cor(PGS_all)
diag(corrr) = 0
corrplot::corrplot(corrr)
corrr
source("C:/DATA_STORAGE/Projects/PRS-multi-trait/Scripts/.Main/Settings.R")
Trait = "AD"
cohort_name = "ADNI_QC_EUR05_2"
temp_bfile = paste0("C:/Users/p70072451/Downloads/ADNI/",cohort_name)
temp_bfile3 = f_wslpath(temp_bfile)
bfile = temp_bfile3
bfile
f_getManifest(1)
Trait_index = which(Ref_gwas_manifest$short==Trait)
# check: if manifest Trait exists, else warning with options and return FAIL
if(length(Trait_index)==0){
warning("\n\nEntered trait('",Trait,"') does not match any of the existing traits in manifest!","\n","  Options:\n    -",paste0(Ref_gwas_manifest$short,collapse = "\n    -"),"\n\n")
return(message("predPRS failed!\n"))
}
# show info
{cat("#-----------------------------------#\n")
cat(paste0("Trait: ",Trait,"\n" ))
cat(paste0("Calculation of PRS scores of: ",Ref_gwas_manifest[Trait_index,"short"]," \n"))
cat(paste0("Data: ",gsub(bfile,pattern = "^.*./",replacement = ""), "\n"))
cat("#-----------------------------------#\n\n\n")}
bfile
system("powershell Get-Content .gitconfig -Head 1")
system("powershell Get-Content temp.PTR -Head 1")
system("powershell Get-Content TCA.log -Head 1")
system("powershell Get-Content TCA.log -Head 1",intern = TRUE)
bfile
bfile
paste0(bfile,".bim")
system("wsl awk 'NR==1{print $1}' ,",paste0(bfile,".bim"), intern = TRUE)
system(paste0("wsl awk 'NR==1{print $1}' ",bfile,".bim"), intern = TRUE)
system(paste0("wsl awk 'NR==1{print $2}' ",bfile,".bim"), intern = TRUE)
testedNotation = system(paste0("wsl awk 'NR==1{print $1}' ",bfile,".bim"), intern = TRUE)
testedNotation
testedNotation = system(paste0("wsl awk 'NR==1{print $2}' ",bfile,".bim"), intern = TRUE)
strsplit(testedNotation,":")
testedNotation
grep(testedNotation,pattern = ":")
grep(testedNotation,pattern = "ss")
grep(testedNotation,pattern = ":")
warning("\n\nEntered bfile('",bfile,"') does not contain the correct ID format!","This should be CHR:BP (1:2345678) and not (",testedNotation,")","\n\n")
return("\n\nEntered bfile('",bfile,"') does not contain the correct ID format!\n","This should be CHR:BP (1:2345678) and not (",testedNotation,")","\n\n")
return(paste0("\n\nEntered bfile('",bfile,"') does not contain the correct ID format!\n","This should be CHR:BP (1:2345678) and not (",testedNotation,")","\n\n"))
paste0("\n\nEntered bfile('",bfile,"') does not contain the correct ID format!\n","This should be CHR:BP (1:2345678) and not (",testedNotation,")","\n\n")
cat(paste0("\n\nEntered bfile('",bfile,"') does not contain the correct ID format!\n","This should be CHR:BP (1:2345678) and not (",testedNotation,")","\n\n"))
return(message(paste0("\n\nEntered trait('",Trait,"') does not match any of the existing traits in manifest!","\n","  Options:\n    -",paste0(Ref_gwas_manifest$short,collapse = "\n    -"),"\n\n","predPRS failed!\n")))
bfile = "dsadsadas
""
bfile = "dsadsadas"
s
system(paste0("wsl awk 'NR==1{print $2}' ",bfile,".bim"), intern = TRUE)
testedNotation = system(paste0("wsl awk 'NR==1{print $2}' ",bfile,".bim"), intern = TRUE)
grep(testedNotation,pattern = ":")
testedNotation
strsplit(testedNotation)
strsplit(testedNotation,split = ":")
length(strsplit(testedNotation,split = ":"))
strsplit(testedNotation,split = ":")
strsplit(testedNotation,split = ":")[[1]]
length(strsplit(testedNotation,split = ":")[[1]])
(length(strsplit(testedNotation,split = ":")[[1]])!=2)
return(paste0("\n\nEntered bfile ('",bfile,"') does not contain the correct ID format!\n","This should be CHR:BP (such as 1:2345678) and not (",testedNotation,")","\n\n"))
{paste0("\n\nEntered bfile ('",bfile,"') does not contain the correct ID format!\n","This should be CHR:BP (such as 1:2345678) and not (",testedNotation,")","\n\n")}
temp_bfile3
bfile = temp_bfile3
testedNotation = system(paste0("wsl awk 'NR==1{print $2}' ",bfile,".bim"), intern = TRUE)
length(strsplit(testedNotation,split = ":")[[1]])
setwd()
setwd("")
setwd(".")
getwd()
setwd("C:/DATA_STORAGE/Projects/PRS-multi-trait/Package")
devtools::create("PRSMultiTrait")
x=1:100
usethis::use_data(x,internal = TRUE)
