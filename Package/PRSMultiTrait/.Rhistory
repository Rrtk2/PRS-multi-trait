x = 1:100
usethis::use_data(x,internal = TRUE)
PRSMultiTrait:::
PRSMultiTrait::
PRSMultiTrait:::x
usethis::use_data(x,internal = FALSE)
PRSMultiTrait:::x
usethis::use_data(x,internal = FALSE)
PRSMultiTrait:::x
devtools::document()
devtools::document()
PRSMultiTrait:::x
PRSMultiTrait:::getTraits()
PRSMultiTrait::Ref_gwas_manifest
PRSMultiTrait::x
PRSMultiTrait::Ref_gwas_manifest
devtools::document()
warnings()
library(PRSMultiTrait)
devtools::load_all()
PRSMultiTrait::Ref_gwas_manifest
load("C:/DATA_STORAGE/Projects/PRS-multi-trait/Package/PRSMultiTrait/data/x.rdata")
file.path(system.file(package=PACKAGE), "..", "data")
file.path(system.file(package="PRSMultiTRait"), "..", "data")
file.path(system.file(package="RRtest"), "..", "data")
file.path(system.file(package="RRtest"), "data","Ref_gwas_manifest.rda")
load(file.path(system.file(package="RRtest"), "data","Ref_gwas_manifest.rda"))
file.path(system.file(package="RRtest"), "data","Ref_gwas_manifest.rda")
devtools::document()
file.path(system.file(package="RRtest"))
file.path(system.file(package="PRSMultiTrait"), "Core")
file.path(system.file(package="PRSMultiTrait"), "Core/")
s_ROOT_dir <<- file.path(system.file(package="PRSMultiTrait"), "Core//")
s_ROOT_dir
s_ROOT_dir
#-----------------------------------------------------------------------------------------------------#
#							Comment
#-----------------------------------------------------------------------------------------------------#
# Use '<<-' to assign to global envir. Do this here or seetings might be lost
#-----------------------------------------------------------------------------------------------------#
#							SEED
#-----------------------------------------------------------------------------------------------------#
# set seed for consistency
s_seed <<- 42
#-----------------------------------------------------------------------------------------------------#
#							ROOT FOLDER
#-----------------------------------------------------------------------------------------------------#
# define ROOT here
s_ROOT_dir <<- file.path(system.file(package="PRSMultiTrait"), "Core//")
s_ROOT_current_folder_name <<- "Test_branch"
s_figure_folder_name <<- "Plots"
#-----------------------------------------------------------------------------------------------------#
#							GET FUNCTIONS
#-----------------------------------------------------------------------------------------------------#
# source functions
#source(paste0(s_ROOT_dir,"Scripts/Functions/Functions.R"))
#-----------------------------------------------------------------------------------------------------#
#							GET PROGRAM LOCATIONS
#-----------------------------------------------------------------------------------------------------#
# if installed using installer, these should be OK. Else adapt!!!
s_plinkloc = paste0(s_ROOT_dir,"Programs/Plink2/plink2.exe")
#s_gzip = paste0(s_ROOT_dir,"Programs/GnuWin32/bin/gzip.exe")
s_ldak = f_wslpath(paste0(s_ROOT_dir,"Programs/LDAK/ldak5.2.linux"))
s_ldak = PRSMultiTrait::f_wslpath(paste0(s_ROOT_dir,"Programs/LDAK/ldak5.2.linux"))
PRSMultiTrait::f_wslpath
s_ldak = PRSMultiTrait::wslpath(paste0(s_ROOT_dir,"Programs/LDAK/ldak5.2.linux"))
s_ldak
#-----------------------------------------------------------------------------------------------------#
#							DEFINE OUTPUT FOLDER
#-----------------------------------------------------------------------------------------------------#
# change this to generate a different run, stored in new location
s_out_folder <<- paste0("Data_QC/",s_ROOT_current_folder_name,"/")
# define out loc
s_OUT_dir <<- paste0(s_ROOT_dir,s_out_folder)
# define figure folder
s_figure_folder <<- paste0(s_ROOT_dir,s_out_folder,s_figure_folder_name,"/")
temp_all_dirs = c(s_figure_folder_name,"Manifest","Functions","LDAK","Predict","SumStats","DATA")
if(!dir.exists(paste0(s_OUT_dir))){dir.create(file.path(paste0(s_OUT_dir)))}
lapply(temp_all_dirs,function(i){if(!dir.exists(paste0(s_OUT_dir,i))){dir.create(file.path(paste0(s_OUT_dir,i)))}})
s_figure_folder_name
s_OUT_dir
#-----------------------------------------------------------------------------------------------------#
#							DEFINE OUTPUT FOLDER
#-----------------------------------------------------------------------------------------------------#
# change this to generate a different run, stored in new location
s_out_folder <<- paste0(s_ROOT_current_folder_name,"/")
# define out loc
s_OUT_dir <<- paste0(s_ROOT_dir,s_out_folder)
# define figure folder
s_figure_folder <<- paste0(s_ROOT_dir,s_out_folder,s_figure_folder_name,"/")
#-----------------------------------------------------------------------------------------------------#
#							MAKE OUTPUT FOLDERS IF NEEDED
#-----------------------------------------------------------------------------------------------------#
# main folders
temp_all_dirs = c(s_figure_folder_name,"Manifest","Functions","LDAK","Predict","SumStats","DATA")
if(!dir.exists(paste0(s_OUT_dir))){dir.create(file.path(paste0(s_OUT_dir)))}
lapply(temp_all_dirs,function(i){if(!dir.exists(paste0(s_OUT_dir,i))){dir.create(file.path(paste0(s_OUT_dir,i)))}})
# make output folders under ~/DATA
temp_all_dirs2 = c("manifest","gwas","models")
lapply(temp_all_dirs2,function(i){if(!dir.exists(paste0(s_OUT_dir,"DATA/",i))){dir.create(file.path(paste0(s_OUT_dir,"DATA/",i)))}})
#-----------------------------------------------------------------------------------------------------#
#							REF PANEL
#-----------------------------------------------------------------------------------------------------#
s_ref_out_name = "gbr.hapmap"#"1000G_phase3_final"
s_data_loc_ref = paste0(s_ROOT_dir,"Data_RAW/gbr_hapmap/") # 1000G code is: paste0(s_ROOT_dir,"Data_RAW/1000Genomes/")
s_ref_loc_final = paste0(s_data_loc_ref,s_ref_out_name)
#-----------------------------------------------------------------------------------------------------#
#							INSTALLER (last as it needs locations based on items before)
#-----------------------------------------------------------------------------------------------------#
source(paste0(s_ROOT_dir,"Scripts/.MAIN/Installer.R"))
#-----------------------------------------------------------------------------------------------------#
#							Make SETTINGS file (IF NOT EXISTS)
#-----------------------------------------------------------------------------------------------------#
if(!file.exists(paste0(s_OUT_dir,"SETTINGS.txt"))){
temp_settings_names = ls()[grep(ls(),pattern = "^s_")]
temp_set = data.frame(variable = temp_settings_names, value = NA)
for(i in 1:nrow(temp_set)){
temp_set[i,"value"] =  get(temp_set[i,"variable"] )
}
write.table("SETTINGS:",file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE)
write.table(temp_set,file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = TRUE,append = TRUE)
write.table("\nVERSION:",file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE,append = TRUE)
write.table(data.frame(name=names(version),value=unlist(version)),file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE,append = TRUE)
write.table("\nSYSTEM INFO:",file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE,append = TRUE)
write.table(data.frame(name=names(Sys.info()),value=unlist(Sys.info())),file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE,append = TRUE)
write.table("\nBASE PACKAGES:",file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE,append = TRUE)
write.table(sessionInfo()$basePkgs,file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE,append = TRUE)
write.table("\nOTHER PACKAGES:",file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE,append = TRUE)
write.table(names(sessionInfo()$otherPkgs),file = paste0(s_OUT_dir,"SETTINGS.txt"),sep = "\t",quote = FALSE,row.names = FALSE,col.names = FALSE,append = TRUE)
}
devtools::document()
devtools::document()
s_ROOT_dir
installDependenciesAndData()
devtools::document()
devtools::document()
devtools::load_all()
installDependenciesAndData()
library(PRSMultiTrait)
installDependenciesAndData()
devtools::load_all()
installDependenciesAndData()
library(PRSMultiTrait)
installDependenciesAndData()
wslpath
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
library(PRSMultiTrait)
PRSMultiTrait::getTraits()
Settings_env
Settings_env <- new.env()
Settings_env
library(PRSMultiTrait)
Settings_env
library(PRSMultiTrait)
devtools::document()
environment()
devtools::document()
devtools::document()
Settings_env
Settings_env$s_data_loc_ref
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(PRSMultiTrait)
installDependenciesAndData()
s_OUT_dir
Settings_env$s_OUT_dir
Settings_env$s_ref_loc_final
# print message for installer
cat(">> Reference panel not detected on expected location! <<\n")
cat("   - Installing reference panel from link\n\n")
#if(!dir.exists(paste0(paste0(Settings_env$s_ROOT_dir,"Data_RAW/gbr_hapmap/")))){dir.create(file.path(paste0(paste0(Settings_env$s_ROOT_dir,"Data_RAW/gbr_hapmap/"))))}
# Download file into temp file
download.file("https://surfdrive.surf.nl/files/index.php/s/T3RLErWHxIyW5IM/download",paste0(Settings_env$s_ROOT_dir,"Reference/temp.zip"),"curl")
if(!dir.exists(paste0(paste0(Settings_env$s_ROOT_dir,"Reference/")))){dir.create(file.path(paste0(paste0(Settings_env$s_ROOT_dir,"Reference/"))))}
# Download file into temp file
download.file("https://surfdrive.surf.nl/files/index.php/s/T3RLErWHxIyW5IM/download",paste0(Settings_env$s_ROOT_dir,"Reference/temp.zip"),"curl")
# Unzip
unzip(paste0(Settings_env$s_ROOT_dir,"Reference/temp.zip"),exdir=paste0(Settings_env$s_ROOT_dir,"Reference"))  # unzip your file
# Remove temp file
file.remove(paste0(Settings_env$s_ROOT_dir,"Reference/temp.zip"))
if(!file.exists(paste0(paste0(Settings_env$s_ROOT_dir,"Reference/Example/"),"1000G_phase3_final_2.bed"))){
# print message for installer
cat(">> Example (toy) data not detected on expected location! <<\n")
cat("   - Installing example (toy) data panel from link\n\n")
if(!dir.exists(paste0(paste0(Settings_env$s_ROOT_dir,"Reference/Example/")))){dir.create(file.path(paste0(paste0(Settings_env$s_ROOT_dir,"Reference/Example/"))))}
# Download file into temp file
download.file("https://surfdrive.surf.nl/files/index.php/s/rjUmOgWaLfbk5DI/download",paste0(Settings_env$s_ROOT_dir,"Reference/Example/temp.zip"),"curl")
# Unzip
unzip(paste0(Settings_env$s_ROOT_dir,"Reference/Example/temp.zip"),exdir=paste0(Settings_env$s_ROOT_dir,"Reference/Example"))  # unzip your file
# Remove temp file
file.remove(paste0(Settings_env$s_ROOT_dir,"Reference/Example/temp.zip"))
}
devtools::document()
devtools::load_all()
library(PRSMultiTrait)
installDependenciesAndData()
installDependenciesAndData()
getManifest()
Settings_env$s_out_folder
Settings_env$s_ROOT_dir
getManifest = function(printManifest=FALSE){
load(file = paste0(Settings_env$s_ROOT_dir,"data/Ref_gwas_manifest.rda"),envir = .GlobalEnv)
if(printManifest){
cat("GWAS manifest file (Ref_gwas_manifest):\n\n")
print(Ref_gwas_manifest)
cat("\n\n")
}
}
getManifest
getManifest ()
s_ROOT_dir
s_ROOT_dir
s_ROOT_dir
Settings_env$s_ROOT_dir
Settings_env$s_ROOT_dir
file.path(system.file(package="PRSMultiTrait"))
file.path(system.file(package="PRSMultiTrait/"))
file.path(system.file(package="PRSMultiTrait"))
file.path(system.file(package="PRSMultiTrait\"))
file.path(system.file(package="PRSMultiTrait\")))
file.path(system.file(package="PRSMultiTrait\"))
file.path(system.file(package="PRSMultiTrait\")
file.path(system.file(package="PRSMultiTrait"))
file.path(system.file(package="PRSMultiTrait//"))
file.path(system.file(package="PRSMultiTrait"),"//")
file.path(system.file(package="PRSMultiTrait"),"/")
Settings_env$s_manifest_path = file.path(system.file(package="PRSMultiTrait","/"))
load(file = paste0(Settings_env$s_manifest_path,"data/Ref_gwas_manifest.rda"),envir = .GlobalEnv)
getManifest = function(printManifest=FALSE){
load(file = paste0(Settings_env$s_manifest_path,"data/Ref_gwas_manifest.rda"),envir = Manifest_env)
if(printManifest){
cat("GWAS manifest file (Ref_gwas_manifest):\n\n")
print(Manifest_env$Ref_gwas_manifest)
cat("\n\n")
}
}
devtools::document()
devtools::document()
devtools::load_all()
getManifest = function(printManifest=FALSE){
load(file = paste0(Settings_env$s_manifest_path,"data/Ref_gwas_manifest.rda"),envir = Manifest_env)
if(printManifest){
cat("GWAS manifest file (Ref_gwas_manifest):\n\n")
print(Manifest_env$Ref_gwas_manifest)
cat("\n\n")
}
}
getManifest()
getManifest(1)
devtools::document()
getManifest(1)
devtools::document()
devtools::document()
devtools::load_all()
getManifest(1)
getManifest()
getTraits()
f_calcPGS_LDAK(Trait = "test_height", Model = "bayesr")
calcPGS_LDAK(Trait = "test_height", Model = "bayesr")
f_calcPGS_LDAK(Trait = "test_height", Model = "bayesr")
calcPGS_LDAK(Trait = "test_height", Model = "bayesr")
Manifest_env$Ref_gwas_manifest
save(Manifest_env$Ref_gwas_manifest, file = paste0(Settings_env$s_manifest_path,"data/Ref_gwas_manifest.rda"),envir = Manifest_env)
Manifest_env
Manifest_env$Ref_gwas_manifest
save(Manifest_env$Ref_gwas_manifest, file = paste0(Settings_env$s_manifest_path,"data/Ref_gwas_manifest.rda"),envir = Manifest_env)
}
save(Ref_gwas_manifest, file = paste0(Settings_env$s_manifest_path,"data/Ref_gwas_manifest.rda"),envir = Manifest_env)
save(Ref_gwas_manifest, file = paste0(Settings_env$s_manifest_path,"data/Ref_gwas_manifest.rda"),envir = Manifest_env)
devtools::document()
devtools::load_all()
f_calcPGS_LDAK(Trait = "test_height", Model = "bayesr")
calcPGS_LDAK(Trait = "test_height", Model = "bayesr")
predPRS(bfile = f_wslpath("C:/DATA_STORAGE/Projects/PRS-multi-trait/Package/PRSMultiTrait/Core/Reference/Example1000G_phase3_final_2"), Trait = "test_height", OverlapSNPsOnly=FALSE, Force = FALSE)
devtools::document()
devtools::load_all()
predPRS(bfile = f_wslpath("C:/DATA_STORAGE/Projects/PRS-multi-trait/Package/PRSMultiTrait/Core/Reference/Example1000G_phase3_final_2"), Trait = "test_height", OverlapSNPsOnly=FALSE, Force = FALSE)
library(PRSMultiTrait)
predPRS(bfile = f_wslpath("C:/DATA_STORAGE/Projects/PRS-multi-trait/Package/PRSMultiTrait/Core/Reference/Example1000G_phase3_final_2"), Trait = "test_height", OverlapSNPsOnly=FALSE, Force = FALSE)
bfile
predPRS(bfile = wslpath("C:/DATA_STORAGE/Projects/PRS-multi-trait/Package/PRSMultiTrait/Core/Reference/Example1000G_phase3_final_2"), Trait = "test_height", OverlapSNPsOnly=FALSE, Force = FALSE)
predPRS(bfile = wslpath("C:/DATA_STORAGE/Projects/PRS-multi-trait/Package/PRSMultiTrait/Core/Reference/Example/1000G_phase3_final_2"), Trait = "test_height", OverlapSNPsOnly=FALSE, Force = FALSE)
devtools::document()
devtools::load_all()
predPRS(bfile = wslPath("C:/DATA_STORAGE/Projects/PRS-multi-trait/Package/PRSMultiTrait/Core/Reference/Example/1000G_phase3_final_2"), Trait = "test_height", OverlapSNPsOnly=FALSE, Force = FALSE)
PRSMultiTrait::collect_all_PRS(cohort = "1000G_phase3_final_2")
paste0(Settings_env$s_ROOT_dir,"/",Settings_env$s_ROOT_current_folder_name,"/Predict/")
devtools::document()
devtools::load_all()
PRSMultiTrait::collect_all_PRS(cohort = "1000G_phase3_final_2")
PGS
PRSMultiTrait::collect_all_PRS(cohort = "1000G_phase3_final_2")
PGS
devtools::document()
PRSMultiTrait::collect_all_PRS(cohort = "1000G_phase3_final_2")
profile$ID1
library(PRSMultiTrait)
